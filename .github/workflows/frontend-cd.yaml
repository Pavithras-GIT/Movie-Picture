name: Frontend CD Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'

jobs:
  lint-and-test:
    name: Run Lint and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [lint, test]
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Run Lint or Test
        run: |
          if [ "${{ matrix.task }}" == "lint" ]; then
            npm run lint
          elif [ "${{ matrix.task }}" == "test" ]; then
            npm test -- --watchAll=false
          fi

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    defaults:
      run:
        working-directory: starter/frontend
    env:
      REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build \
            --build-arg REACT_APP_MOVIE_API_URL=${{ secrets.REACT_APP_MOVIE_API_URL }} \
            -t ${{ secrets.ECR_REGISTRY }}/frontend-repo:latest .
      
      - name: Push Docker image
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/frontend-app:latest

  deploy-to-eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy to cluster
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          envsubst < k8s/frontend-deployment.yaml | kubectl apply -f k8s/frontend-deployment.yaml